diff -Nrub -x *~ -x *\.rej -x *\.orig -x *\.o -x *\.pyc -x CMakeLists.txt.user sqlite-amalgamation-3420000.orig/CMakeLists.txt sqlite-amalgamation-3420000/CMakeLists.txt
--- sqlite-amalgamation-3420000.orig/CMakeLists.txt	1970-01-01 01:00:00
+++ sqlite-amalgamation-3420000/CMakeLists.txt	2024-09-10 16:34:47
@@ -0,0 +1,82 @@
+cmake_minimum_required( VERSION 3.0)
+
+
+file(STRINGS sqlite3.h SQLITE_VERSION_STRING REGEX "define SQLITE_VERSION.*")
+list(GET SQLITE_VERSION_STRING 0 SQLITE_VERSION_STRING)
+string(REGEX MATCH "[0-9]+.[0-9]+.[0-9]+" SQLITE_VERSION_STRING ${SQLITE_VERSION_STRING})
+project( SQLITE VERSION ${SQLITE_VERSION_STRING})
+
+
+set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/ecm)
+
+include(GenerateExportHeader)
+include(GNUInstallDirs)
+include(ECMSetupVersion)
+include(ECMGeneratePkgConfigFile)
+
+if(STATIC_LIBRARY)
+    set(LIBRARY_TYPE STATIC)
+else(STATIC_LIBRARY)
+    set(LIBRARY_TYPE SHARED)
+endif(STATIC_LIBRARY)
+
+option(SQLITE_ENABLE_UNLOCK_NOTIFY    "ENABLE_UNLOCK_NOTIFY"    ON)
+option(SQLITE_ENABLE_COLUMN_METADATA  "ENABLE_COLUMN_METADATA"  ON)
+option(SQLITE_ENABLE_FTS3             "ENABLE_FTS3"             ON)
+option(SQLITE_ENABLE_FTS3_PARENTHESIS "ENABLE_FTS3_PARENTHESIS" ON)
+option(SQLITE_ENABLE_FTS5             "ENABLE_FTS5"             ON)
+option(SQLITE_ENABLE_RTREE            "ENABLE_RTREE"            ON)
+option(SQLITE_DISABLE_DIRSYNC         "DISABLE_DIRSYNC"         ON)
+option(SQLITE_SECURE_DELETE           "SECURE_DELETE"           ON)
+option(SQLITE_ENABLE_DBSTAT_VTAB      "ENABLE_DBSTAT_VTAB"      ON)
+option(SQLITE_ENABLE_JSON1            "ENABLE_JSON1"            ON)
+option(SQLITE_ENABLE_COLUMN_METADATA  "ENABLE_COLUMN_METADATA"  ON)
+option(SQLITE_ENABLE_COLUMN_METADATA  "ENABLE_SHELL"  ON)
+
+if(NOT WIN32)
+  set(HAVE_USLEEP TRUE)
+else()
+  set(HAVE_USLEEP FALSE)
+endif()
+
+find_package( Threads )
+
+
+configure_file(config.h.in sqlite_cfg.h)
+set( sqlite_HEADER sqlite3.h sqlite3ext.h ${CMAKE_CURRENT_BINARY_DIR}/libsqlite3_export.h)
+
+set( libsqlite_SRC sqlite3.c  )
+
+add_library( libsqlite3 ${LIBRARY_TYPE} ${libsqlite_SRC} )
+target_include_directories(libsqlite3 PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
+generate_export_header(libsqlite3 EXPORT_MACRO_NAME SQLITE_API STATIC_DEFINE SQLITE3_STATIC)
+target_compile_definitions(libsqlite3 PRIVATE _HAVE_SQLITE_CONFIG_H)
+target_link_libraries(libsqlite3 PUBLIC Threads::Threads ${CMAKE_DL_LIBS})
+
+if("${LIBRARY_TYPE}" STREQUAL "STATIC")
+  target_compile_definitions(libsqlite3 PRIVATE SQLITE3_STATIC)
+endif()
+
+if(NOT WIN32)
+  target_link_libraries(libsqlite3 PUBLIC m)
+endif()
+
+ecm_generate_pkgconfig_file(
+    BASE_NAME sqlite3
+    INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_INCLUDEDIR}
+    INSTALL
+)
+
+set_target_properties( libsqlite3 PROPERTIES RUNTIME_OUTPUT_NAME libsqlite ARCHIVE_OUTPUT_NAME sqlite3 PREFIX ""
+                                  VERSION ${SQLITE_VERSION_STRING} SOVERSION ${SQLITE_VERSION_MAJOR})
+install( TARGETS libsqlite3 RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} )
+
+if (ENABLE_SHELL)
+    add_executable(sqlite3_bin shell.c)
+    target_link_libraries( sqlite3_bin libsqlite3)
+    target_include_directories(sqlite3_bin PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
+    set_target_properties( sqlite3_bin PROPERTIES RUNTIME_OUTPUT_NAME sqlite3 ARCHIVE_OUTPUT_NAME sqlite3_bin )
+    install( TARGETS sqlite3_bin DESTINATION ${CMAKE_INSTALL_BINDIR})
+endif()
+
+install( FILES ${sqlite_HEADER} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} )
diff -Nrub -x *~ -x *\.rej -x *\.orig -x *\.o -x *\.pyc -x CMakeLists.txt.user sqlite-amalgamation-3420000.orig/cmake/ecm/ECMGeneratePkgConfigFile.cmake sqlite-amalgamation-3420000/cmake/ecm/ECMGeneratePkgConfigFile.cmake
--- sqlite-amalgamation-3420000.orig/cmake/ecm/ECMGeneratePkgConfigFile.cmake	1970-01-01 01:00:00
+++ sqlite-amalgamation-3420000/cmake/ecm/ECMGeneratePkgConfigFile.cmake	2024-09-10 16:34:04
@@ -0,0 +1,182 @@
+#.rst:
+# ECMGeneratePkgConfigFile
+# ------------------------
+#
+# Generate a `pkg-config <https://www.freedesktop.org/wiki/Software/pkg-config/>`_
+# file for the benefit of
+# `autotools <https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html>`_-based
+# projects.
+#
+# ::
+#
+#   ecm_generate_pkgconfig_file(BASE_NAME <baseName>
+#                         [LIB_NAME <libName>]
+#                         [DEPS "<dep> [<dep> [...]]"]
+#                         [FILENAME_VAR <filename_variable>]
+#                         [INCLUDE_INSTALL_DIR <dir>]
+#                         [LIB_INSTALL_DIR <dir>]
+#                         [DEFINES -D<variable=value>...]
+#                         [DESCRIPTION <library description>] # since 5.41.0
+#                         [INSTALL])
+#
+# ``BASE_NAME`` is the name of the module. It's the name projects will use to
+# find the module.
+#
+# ``LIB_NAME`` is the name of the library that is being exported. If undefined,
+# it will default to the ``BASE_NAME``. That means the ``LIB_NAME`` will be set
+# as the name field as well as the library to link to.
+#
+# ``FILENAME_VAR`` is specified with a variable name. This variable will
+# receive the location of the generated file will be set, within the build
+# directory. This way it can be used in case some processing is required. See
+# also ``INSTALL``.
+#
+# ``INCLUDE_INSTALL_DIR`` specifies where the includes will be installed. If
+# it's not specified, it will default to ``INSTALL_INCLUDEDIR``,
+# ``CMAKE_INSTALL_INCLUDEDIR`` or just "include/" in case they are specified,
+# with the BASE_NAME postfixed.
+#
+# ``LIB_INSTALL_DIR`` specifies where the library is being installed. If it's
+# not specified, it will default to ``LIB_INSTALL_DIR``,
+# ``CMAKE_INSTALL_LIBDIR`` or just "lib/" in case they are specified.
+#
+# ``DEFINES`` is a list of preprocessor defines that it is recommended users of
+# the library pass to the compiler when using it.
+#
+# ``DESCRIPTION`` describes what this library is. If it's not specified, CMake
+# will first try to get the description from the metainfo.yaml file or will
+# create one based on ``LIB_NAME``. Since 5.41.0.
+#
+# ``INSTALL`` will cause the module to be installed to the ``pkgconfig``
+# subdirectory of ``LIB_INSTALL_DIR``, unless the ``ECM_PKGCONFIG_INSTALL_DIR``
+# cache variable is set to something different. Note that the first call to
+# ecm_generate_pkgconfig_file with the ``INSTALL`` argument will cause
+# ``ECM_PKGCONFIG_INSTALL_DIR`` to be set to the cache, and will be used in any
+# subsequent calls.
+#
+# To properly use this macro a version needs to be set. To retrieve it,
+# ``ECM_PKGCONFIG_INSTALL_DIR`` uses ``PROJECT_VERSION``. To set it, use the
+# project() command (only available since CMake 3.0) or the ecm_setup_version()
+# macro.
+#
+# Example usage:
+#
+# .. code-block:: cmake
+#
+#   ecm_generate_pkgconfig_file(
+#       BASE_NAME KF5Archive
+#       DEPS Qt5Core
+#       FILENAME_VAR pkgconfig_filename
+#       INSTALL
+#   )
+#
+# Since 1.3.0.
+#
+
+#=============================================================================
+# SPDX-FileCopyrightText: 2014 Aleix Pol Gonzalez <aleixpol@kde.org>
+# SPDX-FileCopyrightText: 2014 David Faure <faure@kde.org>
+#
+# SPDX-License-Identifier: BSD-3-Clause
+
+function(ECM_GENERATE_PKGCONFIG_FILE)
+  set(options INSTALL)
+  set(oneValueArgs BASE_NAME LIB_NAME FILENAME_VAR INCLUDE_INSTALL_DIR LIB_INSTALL_DIR DESCRIPTION)
+  set(multiValueArgs DEPS DEFINES)
+
+  cmake_parse_arguments(EGPF "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
+
+  if(EGPF_UNPARSED_ARGUMENTS)
+    message(FATAL_ERROR "Unknown keywords given to ECM_GENERATE_PKGCONFIG_FILE(): \"${EGPF_UNPARSED_ARGUMENTS}\"")
+  endif()
+
+  if(NOT EGPF_BASE_NAME)
+    message(FATAL_ERROR "Required argument BASE_NAME missing in ECM_GENERATE_PKGCONFIG_FILE() call")
+  endif()
+  if(NOT PROJECT_VERSION)
+    message(FATAL_ERROR "Required variable PROJECT_VERSION not set before ECM_GENERATE_PKGCONFIG_FILE() call. Did you call ecm_setup_version or project with the VERSION argument?")
+  endif()
+  if(NOT EGPF_LIB_NAME)
+    set(EGPF_LIB_NAME ${EGPF_BASE_NAME})
+  endif()
+  if(NOT EGPF_INCLUDE_INSTALL_DIR)
+      if(INCLUDE_INSTALL_DIR)
+          set(EGPF_INCLUDE_INSTALL_DIR "${INCLUDE_INSTALL_DIR}/${EGPF_BASE_NAME}")
+      elseif(CMAKE_INSTALL_INCLUDEDIR)
+          set(EGPF_INCLUDE_INSTALL_DIR "${CMAKE_INSTALL_INCLUDEDIR}/${EGPF_BASE_NAME}")
+      else()
+          set(EGPF_INCLUDE_INSTALL_DIR "include/${EGPF_BASE_NAME}")
+      endif()
+  endif()
+  if(NOT EGPF_LIB_INSTALL_DIR)
+      if(LIB_INSTALL_DIR)
+          set(EGPF_LIB_INSTALL_DIR "${LIB_INSTALL_DIR}")
+      elseif(CMAKE_INSTALL_LIBDIR)
+          set(EGPF_LIB_INSTALL_DIR "${CMAKE_INSTALL_LIBDIR}")
+      else()
+          set(EGPF_LIB_INSTALL_DIR "lib")
+      endif()
+  endif()
+  if(NOT EGPF_DESCRIPTION)
+      if(EXISTS ${CMAKE_SOURCE_DIR}/metainfo.yaml)
+          file(STRINGS "${CMAKE_SOURCE_DIR}/metainfo.yaml" _EGPF_METAINFO_DESCRIPTION_STRING REGEX "^description:.*$")
+          if(_EGPF_METAINFO_DESCRIPTION_STRING)
+              string(REGEX REPLACE "^description:[ ]*(.*)" "\\1" EGPF_DESCRIPTION ${_EGPF_METAINFO_DESCRIPTION_STRING})
+          endif()
+      endif()
+      if("${EGPF_DESCRIPTION}" STREQUAL "")
+          set(EGPF_DESCRIPTION "${EGPF_LIB_NAME} library.")
+      endif()
+  endif()
+
+  set(PKGCONFIG_TARGET_BASENAME ${EGPF_BASE_NAME})
+  set(PKGCONFIG_TARGET_LIBNAME ${EGPF_LIB_NAME})
+  if (DEFINED EGPF_DEPS)
+    string(REPLACE ";" " " PKGCONFIG_TARGET_DEPS "${EGPF_DEPS}")
+  endif ()
+  if(IS_ABSOLUTE "${EGPF_INCLUDE_INSTALL_DIR}")
+      set(PKGCONFIG_TARGET_INCLUDES "${EGPF_INCLUDE_INSTALL_DIR}")
+  else()
+      set(PKGCONFIG_TARGET_INCLUDES "\${prefix}/${EGPF_INCLUDE_INSTALL_DIR}")
+  endif()
+  if(IS_ABSOLUTE "${EGPF_LIB_INSTALL_DIR}")
+      set(PKGCONFIG_TARGET_LIBS "${EGPF_LIB_INSTALL_DIR}")
+  else()
+      set(PKGCONFIG_TARGET_LIBS "\${prefix}/${EGPF_LIB_INSTALL_DIR}")
+  endif()
+  set(PKGCONFIG_TARGET_DESCRIPTION "${EGPF_DESCRIPTION}")
+  set(PKGCONFIG_TARGET_DEFINES "")
+  if(EGPF_DEFINES)
+    set(PKGCONFIG_TARGET_DEFINES "${EGPF_DEFINE}")
+  endif()
+
+  set(PKGCONFIG_FILENAME ${CMAKE_CURRENT_BINARY_DIR}/${PKGCONFIG_TARGET_BASENAME}.pc)
+  if (EGPF_FILENAME_VAR)
+     set(${EGPF_FILENAME_VAR} ${PKGCONFIG_FILENAME} PARENT_SCOPE)
+  endif()
+
+  file(WRITE ${PKGCONFIG_FILENAME}
+"
+prefix=${CMAKE_INSTALL_PREFIX}
+exec_prefix=\${prefix}
+libdir=\${prefix}/${EGPF_LIB_INSTALL_DIR}
+includedir=${PKGCONFIG_TARGET_INCLUDES}
+
+Name: ${PKGCONFIG_TARGET_LIBNAME}
+Description: ${PKGCONFIG_TARGET_DESCRIPTION}
+Version: ${PROJECT_VERSION}
+Libs: -L\${prefix}/${EGPF_LIB_INSTALL_DIR} -l${PKGCONFIG_TARGET_LIBNAME}
+Cflags: -I${PKGCONFIG_TARGET_INCLUDES} ${PKGCONFIG_TARGET_DEFINES}
+Requires: ${PKGCONFIG_TARGET_DEPS}
+"
+  )
+
+  if(EGPF_INSTALL)
+    if(CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
+      set(ECM_PKGCONFIG_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/libdata/pkgconfig" CACHE PATH "The directory where pkgconfig will be installed to.")
+    else()
+      set(ECM_PKGCONFIG_INSTALL_DIR "${EGPF_LIB_INSTALL_DIR}/pkgconfig" CACHE PATH "The directory where pkgconfig will be installed to.")
+    endif()
+    install(FILES ${PKGCONFIG_FILENAME} DESTINATION ${ECM_PKGCONFIG_INSTALL_DIR})
+  endif()
+endfunction()
diff -Nrub -x *~ -x *\.rej -x *\.orig -x *\.o -x *\.pyc -x CMakeLists.txt.user sqlite-amalgamation-3420000.orig/cmake/ecm/ECMSetupVersion.cmake sqlite-amalgamation-3420000/cmake/ecm/ECMSetupVersion.cmake
--- sqlite-amalgamation-3420000.orig/cmake/ecm/ECMSetupVersion.cmake	1970-01-01 01:00:00
+++ sqlite-amalgamation-3420000/cmake/ecm/ECMSetupVersion.cmake	2024-09-10 16:34:04
@@ -0,0 +1,202 @@
+#.rst:
+# ECMSetupVersion
+# ---------------
+#
+# Handle library version information.
+#
+# ::
+#
+#   ecm_setup_version(<version>
+#                     VARIABLE_PREFIX <prefix>
+#                     [SOVERSION <soversion>]
+#                     [VERSION_HEADER <filename>]
+#                     [PACKAGE_VERSION_FILE <filename> [COMPATIBILITY <compat>]] )
+#
+# This parses a version string and sets up a standard set of version variables.
+# It can optionally also create a C version header file and a CMake package
+# version file to install along with the library.
+#
+# If the ``<version>`` argument is of the form ``<major>.<minor>.<patch>``
+# (or ``<major>.<minor>.<patch>.<tweak>``), The following CMake variables are
+# set::
+#
+#   <prefix>_VERSION_MAJOR  - <major>
+#   <prefix>_VERSION_MINOR  - <minor>
+#   <prefix>_VERSION_PATCH  - <patch>
+#   <prefix>_VERSION        - <version>
+#   <prefix>_VERSION_STRING - <version> (for compatibility: use <prefix>_VERSION instead)
+#   <prefix>_SOVERSION      - <soversion>, or <major> if SOVERSION was not given
+#
+# If CMake policy CMP0048 is not NEW, the following CMake variables will also
+# be set::
+#
+#   PROJECT_VERSION_MAJOR   - <major>
+#   PROJECT_VERSION_MINOR   - <minor>
+#   PROJECT_VERSION_PATCH   - <patch>
+#   PROJECT_VERSION         - <version>
+#   PROJECT_VERSION_STRING  - <version> (for compatibility: use PROJECT_VERSION instead)
+#
+# If the VERSION_HEADER option is used, a simple C header is generated with the
+# given filename. If filename is a relative path, it is interpreted as relative
+# to CMAKE_CURRENT_BINARY_DIR.  The generated header contains the following
+# macros::
+#
+#    <prefix>_VERSION_MAJOR  - <major> as an integer
+#    <prefix>_VERSION_MINOR  - <minor> as an integer
+#    <prefix>_VERSION_PATCH  - <patch> as an integer
+#    <prefix>_VERSION_STRING - <version> as a C string
+#    <prefix>_VERSION        - the version as an integer
+#
+# ``<prefix>_VERSION`` has ``<patch>`` in the bottom 8 bits, ``<minor>`` in the
+# next 8 bits and ``<major>`` in the remaining bits.  Note that ``<patch>`` and
+# ``<minor>`` must be less than 256.
+#
+# If the PACKAGE_VERSION_FILE option is used, a simple CMake package version
+# file is created using the write_basic_package_version_file() macro provided by
+# CMake. It should be installed in the same location as the Config.cmake file of
+# the library so that it can be found by find_package().  If the filename is a
+# relative path, it is interpreted as relative to CMAKE_CURRENT_BINARY_DIR. The
+# optional COMPATIBILITY option is forwarded to
+# write_basic_package_version_file(), and defaults to AnyNewerVersion.
+#
+# If CMake policy CMP0048 is NEW, an alternative form of the command is
+# available::
+#
+#   ecm_setup_version(PROJECT
+#                     [VARIABLE_PREFIX <prefix>]
+#                     [SOVERSION <soversion>]
+#                     [VERSION_HEADER <filename>]
+#                     [PACKAGE_VERSION_FILE <filename>] )
+#
+# This will use the version information set by the project() command.
+# VARIABLE_PREFIX defaults to the project name.  Note that PROJECT must be the
+# first argument.  In all other respects, it behaves like the other form of the
+# command.
+#
+# Since pre-1.0.0.
+#
+# COMPATIBILITY option available since 1.6.0.
+
+#=============================================================================
+# SPDX-FileCopyrightText: 2014 Alex Merry <alex.merry@kde.org>
+# SPDX-FileCopyrightText: 2012 Alexander Neundorf <neundorf@kde.org>
+#
+# SPDX-License-Identifier: BSD-3-Clause
+
+include(CMakePackageConfigHelpers)
+
+# save the location of the header template while CMAKE_CURRENT_LIST_DIR
+# has the value we want
+set(_ECM_SETUP_VERSION_HEADER_TEMPLATE "${CMAKE_CURRENT_LIST_DIR}/ECMVersionHeader.h.in")
+
+function(ecm_setup_version _version)
+    set(options )
+    set(oneValueArgs VARIABLE_PREFIX SOVERSION VERSION_HEADER PACKAGE_VERSION_FILE COMPATIBILITY)
+    set(multiValueArgs )
+
+    cmake_parse_arguments(ESV "${options}" "${oneValueArgs}" "${multiValueArgs}"  ${ARGN})
+
+    if(ESV_UNPARSED_ARGUMENTS)
+        message(FATAL_ERROR "Unknown keywords given to ECM_SETUP_VERSION(): \"${ESV_UNPARSED_ARGUMENTS}\"")
+    endif()
+
+    set(project_manages_version FALSE)
+    set(use_project_version FALSE)
+    # CMP0048 only exists in CMake 3.0.0 and later
+    if(CMAKE_VERSION VERSION_LESS 3.0.0)
+        set(project_version_policy "OLD")
+    else()
+        cmake_policy(GET CMP0048 project_version_policy)
+    endif()
+    if(project_version_policy STREQUAL "NEW")
+        set(project_manages_version TRUE)
+        if(_version STREQUAL "PROJECT")
+            set(use_project_version TRUE)
+        endif()
+    elseif(_version STREQUAL "PROJECT")
+        message(FATAL_ERROR "ecm_setup_version given PROJECT argument, but CMP0048 is not NEW")
+    endif()
+
+    set(should_set_prefixed_vars TRUE)
+    if(NOT ESV_VARIABLE_PREFIX)
+        if(use_project_version)
+            set(ESV_VARIABLE_PREFIX "${PROJECT_NAME}")
+            set(should_set_prefixed_vars FALSE)
+        else()
+            message(FATAL_ERROR "Required argument PREFIX missing in ECM_SETUP_VERSION() call")
+        endif()
+    endif()
+
+    if(use_project_version)
+        set(_version "${PROJECT_VERSION}")
+        set(_major "${PROJECT_VERSION_MAJOR}")
+        set(_minor "${PROJECT_VERSION_MINOR}")
+        set(_patch "${PROJECT_VERSION_PATCH}")
+    else()
+        string(REGEX REPLACE "^0*([0-9]+)\\.[0-9]+\\.[0-9]+.*" "\\1" _major "${_version}")
+        string(REGEX REPLACE "^[0-9]+\\.0*([0-9]+)\\.[0-9]+.*" "\\1" _minor "${_version}")
+        string(REGEX REPLACE "^[0-9]+\\.[0-9]+\\.0*([0-9]+).*" "\\1" _patch "${_version}")
+    endif()
+
+    if(NOT ESV_SOVERSION)
+        set(ESV_SOVERSION ${_major})
+    endif()
+
+    if(should_set_prefixed_vars)
+        set(${ESV_VARIABLE_PREFIX}_VERSION "${_version}")
+        set(${ESV_VARIABLE_PREFIX}_VERSION_MAJOR ${_major})
+        set(${ESV_VARIABLE_PREFIX}_VERSION_MINOR ${_minor})
+        set(${ESV_VARIABLE_PREFIX}_VERSION_PATCH ${_patch})
+    endif()
+
+    set(${ESV_VARIABLE_PREFIX}_SOVERSION ${ESV_SOVERSION})
+
+    if(NOT project_manages_version)
+        set(PROJECT_VERSION "${_version}")
+        set(PROJECT_VERSION_MAJOR "${_major}")
+        set(PROJECT_VERSION_MINOR "${_minor}")
+        set(PROJECT_VERSION_PATCH "${_patch}")
+    endif()
+
+    # compat
+    set(PROJECT_VERSION_STRING "${PROJECT_VERSION}")
+    set(${ESV_VARIABLE_PREFIX}_VERSION_STRING "${${ESV_VARIABLE_PREFIX}_VERSION}")
+
+    if(ESV_VERSION_HEADER)
+        set(HEADER_PREFIX "${ESV_VARIABLE_PREFIX}")
+        set(HEADER_VERSION "${_version}")
+        set(HEADER_VERSION_MAJOR "${_major}")
+        set(HEADER_VERSION_MINOR "${_minor}")
+        set(HEADER_VERSION_PATCH "${_patch}")
+        configure_file("${_ECM_SETUP_VERSION_HEADER_TEMPLATE}" "${ESV_VERSION_HEADER}")
+    endif()
+
+    if(ESV_PACKAGE_VERSION_FILE)
+        if(NOT ESV_COMPATIBILITY)
+            set(ESV_COMPATIBILITY AnyNewerVersion)
+        endif()
+        write_basic_package_version_file("${ESV_PACKAGE_VERSION_FILE}" VERSION ${_version} COMPATIBILITY ${ESV_COMPATIBILITY})
+    endif()
+
+    if(should_set_prefixed_vars)
+        set(${ESV_VARIABLE_PREFIX}_VERSION_MAJOR "${${ESV_VARIABLE_PREFIX}_VERSION_MAJOR}" PARENT_SCOPE)
+        set(${ESV_VARIABLE_PREFIX}_VERSION_MINOR "${${ESV_VARIABLE_PREFIX}_VERSION_MINOR}" PARENT_SCOPE)
+        set(${ESV_VARIABLE_PREFIX}_VERSION_PATCH "${${ESV_VARIABLE_PREFIX}_VERSION_PATCH}" PARENT_SCOPE)
+        set(${ESV_VARIABLE_PREFIX}_VERSION       "${${ESV_VARIABLE_PREFIX}_VERSION}"       PARENT_SCOPE)
+    endif()
+
+    # always set the soversion
+    set(${ESV_VARIABLE_PREFIX}_SOVERSION "${${ESV_VARIABLE_PREFIX}_SOVERSION}" PARENT_SCOPE)
+
+    if(NOT project_manages_version)
+        set(PROJECT_VERSION       "${PROJECT_VERSION}"       PARENT_SCOPE)
+        set(PROJECT_VERSION_MAJOR "${PROJECT_VERSION_MAJOR}" PARENT_SCOPE)
+        set(PROJECT_VERSION_MINOR "${PROJECT_VERSION_MINOR}" PARENT_SCOPE)
+        set(PROJECT_VERSION_PATCH "${PROJECT_VERSION_PATCH}" PARENT_SCOPE)
+    endif()
+
+    # always set the compatibility variables
+    set(PROJECT_VERSION_STRING "${PROJECT_VERSION_STRING}" PARENT_SCOPE)
+    set(${ESV_VARIABLE_PREFIX}_VERSION_STRING "${${ESV_VARIABLE_PREFIX}_VERSION}" PARENT_SCOPE)
+
+endfunction()
diff -Nrub -x *~ -x *\.rej -x *\.orig -x *\.o -x *\.pyc -x CMakeLists.txt.user sqlite-amalgamation-3420000.orig/config.h.in sqlite-amalgamation-3420000/config.h.in
--- sqlite-amalgamation-3420000.orig/config.h.in	1970-01-01 01:00:00
+++ sqlite-amalgamation-3420000/config.h.in	2024-09-10 16:34:04
@@ -0,0 +1,19 @@
+#ifndef SQLITECONFIG_H
+#define SQLITECONFIG_H 1
+#include "libsqlite3_export.h"
+
+#cmakedefine01 SQLITE_ENABLE_UNLOCK_NOTIFY
+#cmakedefine01 SQLITE_ENABLE_COLUMN_METADATA1
+#cmakedefine01 SQLITE_ENABLE_FTS3
+#cmakedefine01 SQLITE_ENABLE_FTS3_PARENTHESIS
+#cmakedefine01 SQLITE_ENABLE_FTS5
+#cmakedefine01 SQLITE_ENABLE_RTREE
+#cmakedefine01 SQLITE_DISABLE_DIRSYNC
+#cmakedefine01 SQLITE_SECURE_DELETE
+#cmakedefine01 SQLITE_ENABLE_DBSTAT_VTAB
+#cmakedefine01 SQLITE_ENABLE_JSON1
+#cmakedefine01 SQLITE_ENABLE_COLUMN_METADATA
+
+#cmakedefine01 HAVE_USLEEP
+
+#endif
diff -Nrub -x *~ -x *\.rej -x *\.orig -x *\.o -x *\.pyc -x CMakeLists.txt.user sqlite-amalgamation-3420000.orig/sqlite3.c sqlite-amalgamation-3420000/sqlite3.c
--- sqlite-amalgamation-3420000.orig/sqlite3.c	2023-05-16 15:45:23
+++ sqlite-amalgamation-3420000/sqlite3.c	2024-09-10 16:34:04
@@ -1,3 +1,4 @@
+#include "libsqlite3_export.h"
 /******************************************************************************
 ** This file is an amalgamation of many separate C source files from SQLite
 ** version 3.42.0.  By combining all the individual C code files into this
diff -Nrub -x *~ -x *\.rej -x *\.orig -x *\.o -x *\.pyc -x CMakeLists.txt.user sqlite-amalgamation-3420000.orig/sqlite3.h sqlite-amalgamation-3420000/sqlite3.h
--- sqlite-amalgamation-3420000.orig/sqlite3.h	2023-05-16 15:45:23
+++ sqlite-amalgamation-3420000/sqlite3.h	2024-09-10 16:34:04
@@ -32,6 +32,8 @@
 */
 #ifndef SQLITE3_H
 #define SQLITE3_H
+#include "libsqlite3_export.h"
+
 #include <stdarg.h>     /* Needed for the definition of va_list */
 
 /*
