## You can use cmake like variables for values in the same section ${Variable}
## or for variables from a different section ${Section:Variable}.
## See Paths/${DOWNLOADDIR}

[General]

## Here you set the ABI to be used.
## #platform-#abi-#compiler
## Valid combinations are:
## windows-msvc[2015, 2017]_[32, 64]-[cl, clang]
## windows-mingw_[32, 64]-[gcc, clang]
## linux-[32, 64]-[gcc, clang]
## macos-[32, 64]-clang
## freebsd-[32, 64]-clang
ABI = windows-msvc2015_64-cl
## This option should be set to False if you use the msvc 201X Express Edition 64bit compiler
## in all other cases, simply keep this option commented out
#Native=False

## This option can be used to enable a notification backend.
## As soon as the buildprocess of a project has finished a notification will be displayed.
## Possible Backends:
## Snore: https://commits.kde.org/snorenotify. Snore supports multiple backends.
##      Just 'craft snorenotify'
##      To configure snorenotify for craft call 'snoresettings --appName snoresend'
## SnoreToast: simple command line util for Windows notifications
Notify = SnoreToast

## Speed up the merging of packages by using hard links
UseHardlinks = True

[Variables]
## Values here are usually set by craft and can be used for dynamic values
## To override the variables, uncomment them

## The working directory of Craft
#CraftRoot =

## The directory of the Craft clone
#CraftDir =


[Paths]
## This is the location of your python installation.
## This value must be set.
Python = C:\PROGRA~1\Python36

## Some applications may need python 2.7
#Python27 = C:\python27

## Craft ist able to fetch and install Msys itself, but if you prefer to use
## your own installation specify it here
#Msys = C:\msys

## Here you change the download directory.
## If you want, so you can share the same download directory between
## mingw and msvc.
## The default value is craft/../download
#DownloadDir = C:\kde\download

## This option defines the location for git checkouts.
## The default value is craft/../download/git
#KDEGitDir = ${DOWNLOADDIR}\git

## This option defines the location for svn checkouts.
## The default value is craft/../download/svn
#KDESVNDir = ${DOWNLOADDIR}\svn

## This option defines the location where the ccache files are stored.
## The default location is KDEROOT/build/ccache
#CCACHE_DIR = C:\CCACHE\kf5

[Compile]
## the buildtype of this installation
## Possible Values:
## Release
## RelWithDebInfo
## Debug
## MinSizeRel
BuildType = RelWithDebInfo

## Whether to use ninja (default: False)
UseNinja = True

## Whether to use ccache (only avalible with mingw compiler)
#UseCCache = True

## This option can be used to override the default make program
## change the value to the path of the executable you want to use instead.
MakeProgram = jom

[CMake]
## Fetch the translations for KDE projects when build from git
KDE_L10N_AUTO_TRANSLATIONS = OFF

[ShortPath]
## substitute pathes by drives
## This option is needed to avoid path limit problems in case of long base paths
## and compiling big packages like qt
## If you disable it do _not_ use any paths longer than 6 letters in the
## directory settings
Enabled = True

## each drive could be commented out to skip substitution
RootDrive = R:
GitDrive = Q:
#DownloadDrive = T:


## Experimental!!!
## Use Junctions to work around long paths.
#EnableJunctions = True

## The directory where the junctions are created.
#JunctionDir=

## A drive letter where JunctionDir is mounted to.
## When this variable is defined craft will mount the drive even if [ShortPath]Enabled == False
#JunctionDrive = Z:



[Blueprints]
## The location where the default blueprints are stored
## This is especially useful when using multiple Craft setups
#BlueprintRoot = ${Variables:CraftRoot}/etc/blueprints/locations

## The locations of the recipes
## You can specify additional external locations in ; separated list
#Locations = C:\blueprints

# Customer settings
Settings = ${Variables:CraftRoot}/etc/BlueprintSettings.ini

[BlueprintVersions]
## Allow to automatically update certain recipes once a day.
EnableDailyUpdates = True

[Packager]
## The location where generated installers are placed
#Destination = ${Variables:CraftRoot}/tmp

## The archive type for packages.
## Possible values are: zip, 7z
## Todo: rename
#7ZipArchiveType = 7z

# id assigned to you by the Windows Store
#AppxPublisherId = CN=98B52D9A-DF7C-493E-BADC-37004A92EFC8

## If set this will override the default package type.
## Possible values are:
### SevenZipPackager: An image of the files installed by the package
### MSIFragmentPackager
### NullsoftInstallerPackager: A nsis based installer including all dependencies
### CreateArchivePackager: An image including all dependencies
#PackageType = SevenZipPackager

## Package the Source files too.
PackageSrc = False

## Whether to package debug symbols
### by default debug symbols are stripped/removed from the package
### If PackageDebugSymbols is set to True, a separate archive with the symbols is created.
PackageDebugSymbols = False

## A url to a Craft cache repository
## Sets a custom repository for the binary cache
#RepositoryUrl = https://files.kde.org/craft/master/

## Enable to fatch packages from a Craft cache repository
## See --use-cache and --no-cache in the Craft help.
UseCache = True

[CraftDebug]
## If you want to have verbose output, uncomment the following option
## and set it to positive integer for verbose output and to 0
## (or disable it) for normal output. Currently the highest verbosity level
## is 3 (equal to 'craft -v -v -v'). level -1 equals 'craft -q'
## Default is Verbose = 0
#Verbose = 1

# Log environment, prints the current state of the environment before an application is run
LogEnvironment = True

## Prints time spend on various craft tasks
MeasureTime = False

## Dump internal state of craftSettings to kdesettings.ini.dump
#DumpSettings = True

## Print function Deprecation messages
LogDeprecated = True

[Environment]
## All values defined here will be populated to the environment
#GIT_COMMITTER_EMAIL = foo@bar.com

## Set the ssh client for git and svn.
#GIT_SSH = plink
#SVN_SSH = plink


[QtSDK]
## For advanced users only
## Whether to use prebuild Qt binaries.
Enabled = False
## The path to the Qt sdk.
Path = D:\Qt
## The version of Qt.
Version = 5.11.1
## The compiler version, if you are not sure what to use, have a look into the directory set in QtSDK/Path.
## The compiler must be of the same type as General/KDECOMPILER.
## If you are using mingw please make sure you have installed the mingw using the Qt installer.
Compiler = mingw482_32

[ContinuousIntegration]
## Changes the verbosity of some sub processes.
## Installed versions must match.
## Don't write to stderr
Enabled = False

## Delete the build folder after the install
ClearBuildFolder = False

[CodeSigning]
Enabled = False
CommonName = K Desktop Environment e.V.
Organization = K Desktop Environment e.V.
Locality = Berlin
Country = DE
State =

# Use dump_syms from breakpad-tools to dump debug symbols at post-install step
[SymbolDumping]
Enabled = False

[Version]
ConfigVersion = 6
