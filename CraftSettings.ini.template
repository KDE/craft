## You can use cmake like variables for values in the same section ${Variable}
## or for variables from a different section ${Section:Variable}.
## See Paths/${DOWNLOADDIR}

[General]

## Here you set the ABI to be used.
## #platform-#abi-#compiler
## Valid combinations are:
## windows-cl-msvc[2019, 2022]-[x86_32, x86_64]
## windows-[gcc, clang]-[x86_32, x86_64]
## linux-[gcc, clang]-[x86_32, x86_64]
## macos-[clang]-[x86_64, arm64]
## freebsd-[gcc, clang]-[x86_32, x86_64]
## android-[gcc, clang]-[arm, arm64, x86_32, x86_64]
ABI = windows-cl-msvc2019-x86_64
## This option specifies which MSVC toolset to use. Leave this commented out for MSVC to pick
## the newest available toolset.
## This is an expert option, do not touch it unless you know exactly what it means.
#MSVCToolset=14.16

## Set the minimum supported MacOs version, this is also limited by Qt
## 10.13 https://github.com/qt/qtbase/blob/5.14/mkspecs/common/macx.conf#L8
## 10.12 https://github.com/qt/qtbase/blob/5.13/mkspecs/common/macx.conf#L8
## 10.12 https://github.com/qt/qtbase/blob/5.12/mkspecs/common/macx.conf#L8
## As projects start to require c++17 we are now requiring 10.15 
#MacDeploymentTarget = 10.15

## Minimum supported Android API level (default: 21)
AndroidAPI = 21
## KDE Frameworks version (for selecting the host tooling)
KFHostToolingVersion = 5
## Path in which the host tooling is installed for Android builds
KF5HostToolingRoot = /opt/nativetooling
KF6HostToolingRoot = /opt/nativetooling
## Path to the CMake config files of the KF5/KF6 host tooling
KF5HostToolingCMakePath = /opt/nativetooling/lib/x86_64-linux-gnu/cmake/
KF6HostToolingCMakePath = /opt/nativetooling6/lib/x86_64-linux-gnu/cmake/
## Additional find root paths when building for Android
## for example for using a pre-built Qt from the SDK
#AndroidAdditionalFindRootPath = /opt/Qt

## This option can be used to enable a notification backend.
## As soon as the buildprocess of a project has finished a notification will be displayed.
## Possible Backends:
## SnoreToast: simple command line util for Windows notifications
## TerminalNotifier: simple command line util for MacOS notifications
## None: Disable notifications
#Notify = SnoreToast

## Speed up the merging of packages by using hard links
UseHardlinks = True

##Â Use ANSI colors for the logs and enable tools to use ANSI colors
AllowAnsiColor = 1

[Variables]
## Values here are usually set by craft and can be used for dynamic values
## To override the variables, uncomment them

## The working directory of Craft
#CraftRoot =

## The directory of the Craft clone
#CraftDir =


[Paths]
## This is the location of your python installation.
## This value must be set.
Python = C:\PROGRA~1\Python38

## Craft ist able to fetch and install Msys itself, but if you prefer to use
## your own installation specify it here
#Msys = C:\msys

## Here you change the download directory.
## If you want, so you can share the same download directory between
## mingw and msvc.
## The default value is craft/../download
#DownloadDir = C:\kde\download

## This option defines the location for git checkouts.
## The default value is craft/../download/git
#KDEGitDir = ${DOWNLOADDIR}\git

## This option defines the location for svn checkouts.
## The default value is craft/../download/svn
#KDESVNDir = ${DOWNLOADDIR}\svn

## This option defines the location where the ccache files are stored.
## The default location is KDEROOT/build/ccache
#CCACHE_DIR = C:\CCACHE\kf5

[Compile]
## the buildtype of this installation
## Possible Values:
## Release
## RelWithDebInfo
## Debug
## MinSizeRel
BuildType = RelWithDebInfo

## Whether to use ninja (default: False)
UseNinja = True

## Whether to use ccache (only avalible with mingw compiler)
#UseCCache = True

## This option can be used to override the default make program
## change the value to the path of the executable you want to use instead.
#MakeProgram = jom

## Number of build jobs
## The default is number of cores or determined by the build tool
#Jobs = 2


[CMake]
## Fetch the translations for KDE projects when build from git
KDE_L10N_AUTO_TRANSLATIONS = OFF

[ShortPath]
## Windows only
## The directory where the junctions are created.
## Defaults to CurrentDirve:\_
#JunctionDir=

[Blueprints]
## The location where the default blueprints are stored
## This is especially useful when using multiple Craft setups
#BlueprintRoot = ${Variables:CraftRoot}/etc/blueprints/locations

## The locations of the recipes
## You can specify additional external locations in ; separated list
#Locations = C:\blueprints

# Customer settings
Settings = ${Variables:CraftRoot}/etc/BlueprintSettings.ini

[BlueprintVersions]
## Allow to automatically update certain recipes once a day.
EnableDailyUpdates = True

[Packager]
## The location where generated installers are placed
#Destination = ${Variables:CraftRoot}/tmp

## The archive type for packages.
## Possible values are: zip, 7z
## Todo: rename
#7ZipArchiveType = 7z

# id assigned to you by the Windows Store
#AppxPublisherId = CN=98B52D9A-DF7C-493E-BADC-37004A92EFC8

## If set this will override the default package type.
## Possible values are:
### SevenZipPackager: An image of the files installed by the package
### NullsoftInstallerPackager: A nsis based installer including all dependencies
### AppxPackager: Windows UWP style package including all dependencies
### CreateArchivePackager: An image including all dependencies
#PackageType = SevenZipPackager

## Package the Source files too.
PackageSrc = False

## Whether to package debug symbols
### by default debug symbols are stripped/removed from the package
### If PackageDebugSymbols is set to True, a separate archive with the symbols is created.
PackageDebugSymbols = True

## A url to a Craft cache repository
## Sets a custom repository for the binary cache
#RepositoryUrl = https://files.kde.org/craft/master/

## Enable to fetch packages from a Craft cache repository
## See --use-cache and --no-cache in the Craft help.
UseCache = True

## Enable fetching of debug symbols along with the binaries
DownloadDebugSymbolsCache = False

[CraftDebug]
## If you want to have verbose output, uncomment the following option
## and set it to positive integer for verbose output and to 0
## (or disable it) for normal output. Currently the highest verbosity level
## is 3 (equal to 'craft -v -v -v'). level -1 equals 'craft -q'
## Default is Verbose = 0
#Verbose = 1

# Log environment, prints the current state of the environment before an application is run
LogEnvironment = True

PrintPutEnv = False

## Prints time spend on various craft tasks
MeasureTime = False

## Dump internal state of craftSettings to kdesettings.ini.dump
#DumpSettings = True

## Print function Deprecation messages
LogDeprecated = True

[Environment]
## All values defined here will be populated to the environment
#GIT_COMMITTER_EMAIL = foo@bar.com

## Set the ssh client for git and svn.
#GIT_SSH = plink
#SVN_SSH = plink

[ContinuousIntegration]
## Changes the verbosity of some sub processes.
## Installed versions must match.
## Don't write to stderr
Enabled = False

## Hide the output by default and only display it if an error occurred
OutputOnFailure = False

## Delete the build folder after the install
ClearBuildFolder = False

[CodeSigning]
## Whether to use code signing
Enabled = False
## Enable if your cetificate is password protected or on mac if your keychain need to be unlocked
Protected = False
## Already sign the cache, this speeds up packaging on Windows as most deployed binaries won't need signing every time
SignCache = ${CodeSigning:Enabled}
## If the custom command is not empty it will be used instead of signtool; the
## command can contain the placeholder %F; %F will be replaced with the name of
## a (UTF-8 encoded) file listing the files to sign; if no placeholder is specified
## then the files to sign will be appended to the custom command
## Examples (where a.exe and b.dll shall be signed):
## * WindowsCustomSignCommand = mysigntool.exe
##   Craft runs "mysigntool.exe a.exe b.dll"
## * WindowsCustomSignCommand = mysigntool.exe --files-from %F --sign
##   Craft writes "a.exe" and "b.dll" to a text file, e.g. files.txt, and runs
##   "mysigntool.exe --files-from files.txt --sign"
#WindowsCustomSignCommand =
#Certificate = C:\CraftRoot\mycert.pfx
## Attributes of the certificate's DN (aka Subject)
CommonName = K Desktop Environment e. V.
Organization = K Desktop Environment e. V.
#Street =
#Locality =
Country = DE
State = Berlin
#PostalCode =
## Mac code signing
###################
## Your mac deveoper id asigned with your certificates
MacDeveloperId = K Desktop Environment e.V. (5433B4KXM8)
## Specify the certificates directly instead of using a certificate from standard
## keychain, craft will create a temporary keychain
## The path to the Application certigicate
#MacCertificateApplication =
## The path to the Installer certigicate
#MacCertificateInstaller =
## If the custom command is not empty it will be used instead of codesign
#MacCustomSignCommand =


[Version]
ConfigVersion = 6
